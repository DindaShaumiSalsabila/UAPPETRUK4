#include <iostream>
#include <vector>
#include <list>
#include <stack>
#include <queue>
#include <string>
#include <cstring>
#include <iomanip>
#include <algorithm>
#include <limits> // Untuk membersihkan buffer input

using namespace std;

struct MataKuliah {
    char nama[50];
    string deskripsi;
    int tingkatKesulitan;
    int waktuBelajar;
    int efektivitas;
};

class PenjadwalBelajar {
private:
    vector<MataKuliah> daftarMataKuliah;
    list<MataKuliah> mataKuliahMudah, mataKuliahSedang, mataKuliahSulit;
    stack<string> riwayat;
    queue<MataKuliah> antrianJadwal;

    void cetakHeaderTabel(const string& judul) {
        cout << "\n" << string(60, '=') << "\n";
        cout << judul << "\n";
        cout << string(60, '-') << "\n";
        cout << left << setw(20) << "Nama Matkul" << setw(15) << "Kesulitan"
             << setw(15) << "Waktu (min)" << setw(10) << "Efektivitas" << "\n";
        cout << string(60, '-') << "\n";
    }

public:
    void tambahMataKuliah(const char* nama, const string& desk, int kesulitan, int waktu, int efek) {
        MataKuliah mk;
        strncpy(mk.nama, nama, sizeof(mk.nama) - 1);
        mk.nama[sizeof(mk.nama) - 1] = '\0';
        mk.deskripsi = desk;
        mk.tingkatKesulitan = kesulitan;
        mk.waktuBelajar = waktu;
        mk.efektivitas = efek;
        daftarMataKuliah.push_back(mk);
        riwayat.push("Ditambahkan: " + string(mk.nama));
    }

    void kelompokkanMataKuliah(int kiri, int kanan) {
        if (kiri >= kanan) return;
        int tengah = (kiri + kanan) / 2;
        kelompokkanMataKuliah(kiri, tengah);
        kelompokkanMataKuliah(tengah + 1, kanan);

        for (int i = kiri; i <= kanan; i++) {
            if (daftarMataKuliah[i].tingkatKesulitan <= 30)
                mataKuliahMudah.push_back(daftarMataKuliah[i]),
                riwayat.push("Dikelompokkan " + string(daftarMataKuliah[i].nama) + " sebagai Mudah");
            else if (daftarMataKuliah[i].tingkatKesulitan <= 60)
                mataKuliahSedang.push_back(daftarMataKuliah[i]),
                riwayat.push("Dikelompokkan " + string(daftarMataKuliah[i].nama) + " sebagai Sedang");
            else
                mataKuliahSulit.push_back(daftarMataKuliah[i]),
                riwayat.push("Dikelompokkan " + string(daftarMataKuliah[i].nama) + " sebagai Sulit");
        }
    }
    vector<MataKuliah> jadwalKnapsack(int kapasitasHarian) {
        int n = daftarMataKuliah.size();
        vector<vector<int>> dp(n + 1, vector<int>(kapasitasHarian + 1, 0));
        vector<vector<bool>> simpan(n + 1, vector<bool>(kapasitasHarian + 1, false));

        for (int i = 1; i <= n; i++) {
            for (int w = 0; w <= kapasitasHarian; w++) {
                if (daftarMataKuliah[i - 1].waktuBelajar <= w) {
                    int nilai = daftarMataKuliah[i - 1].efektivitas + dp[i - 1][w - daftarMataKuliah[i - 1].waktuBelajar];
                    if (nilai > dp[i - 1][w]) {
                        dp[i][w] = nilai;
                        simpan[i][w] = true;
                    } else {
                        dp[i][w] = dp[i - 1][w];
                    }
                } else {
                    dp[i][w] = dp[i - 1][w];
                }
            }
        }

    vector<MataKuliah> jadwal;
        int w = kapasitasHarian;
        for (int i = n; i > 0; i--) {
            if (simpan[i][w]) {
                jadwal.push_back(daftarMataKuliah[i - 1]);
                antrianJadwal.push(daftarMataKuliah[i - 1]);
                w -= daftarMataKuliah[i - 1].waktuBelajar;
            }
        }
        return jadwal;
    }

    void tampilkanKategori() {
        cetakHeaderTabel("Kategori Mata Kuliah");
        cout << "\nMudah (<=30):\n";
        for (const auto& mk : mataKuliahMudah)
            cout << left << setw(20) << mk.nama << setw(15) << mk.tingkatKesulitan
                 << setw(15) << mk.waktuBelajar << setw(10) << mk.efektivitas << "\n";

cout << "\nSedang (31-60):\n";
        for (const auto& mk : mataKuliahSedang)
            cout << left << setw(20) << mk.nama << setw(15) << mk.tingkatKesulitan
                 << setw(15) << mk.waktuBelajar << setw(10) << mk.efektivitas << "\n";

        cout << "\nSulit (>60):\n";
        for (const auto& mk : mataKuliahSulit)
            cout << left << setw(20) << mk.nama << setw(15) << mk.tingkatKesulitan
                 << setw(15) << mk.waktuBelajar << setw(10) << mk.efektivitas << "\n";

        cout << string(60, '=') << "\n";
    }

    void tampilkanRiwayat() {
        cout << "\n" << string(60, '=') << "\n";
        cout << "Riwayat Operasi\n" << string(60, '-') << "\n";
        stack<string> temp = riwayat;
        if (temp.empty()) cout << "Belum ada operasi.\n";
        while (!temp.empty()) {
            cout << "- " << temp.top() << "\n";
            temp.pop();
        }
        cout << string(60, '=') << "\n";
    }

    void tampilkanJadwalHarian(int kapasitasHarian) {
        cetakHeaderTabel("Jadwal Belajar Harian (Kapasitas: " + to_string(kapasitasHarian) + " menit)");
        vector<MataKuliah> jadwal = jadwalKnapsack(kapasitasHarian);
        int totalWaktu = 0, totalEfektivitas = 0;
        for (const auto& mk : jadwal) {
            cout << left << setw(20) << mk.nama << setw(15) << mk.tingkatKesulitan
                 << setw(15) << mk.waktuBelajar << setw(10) << mk.efektivitas << "\n";
            totalWaktu += mk.waktuBelajar;
            totalEfektivitas += mk.efektivitas;
        }
        cout << string(60, '-') << "\n";
        cout << left << setw(20) << "Total" << setw(15) << "" << setw(15) << totalWaktu
             << setw(10) << totalEfektivitas << "\n";
        cout << string(60, '=') << "\n";
    }
};

int dapatkanInputValid(const string& perintah, int min, int maks) {
    int nilai;
    while (true) {
        cout << perintah;
        if (cin >> nilai && nilai >= min && nilai <= maks) return nilai;
        cout << "Input tidak valid! Masukkan angka antara " << min << " dan " << maks << ".\n";
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n');
    }
}

int main() {
    PenjadwalBelajar penjadwal;
    int jumlahMataKuliah;

    cout << "\n=== Program Optimalisasi Jadwal Belajar Mahasiswa ===\n";
    jumlahMataKuliah = dapatkanInputValid("Masukkan jumlah mata kuliah: ", 1, 100);
    cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Bersihkan newline

    for (int i = 0; i < jumlahMataKuliah; i++) {
        string nama, deskripsi;
        int tingkatKesulitan, waktuBelajar, efektivitas;

        cout << "\nMata Kuliah " << i + 1 << ":\n";
        cout << "Nama (maks 49 karakter): ";
        getline(cin, nama);
        cout << "Deskripsi: ";
        getline(cin, deskripsi);
        tingkatKesulitan = dapatkanInputValid("Kesulitan (1-100): ", 1, 100);
        waktuBelajar = dapatkanInputValid("Waktu belajar (menit, 1-300): ", 1, 300);
        efektivitas = dapatkanInputValid("Efektivitas (1-200): ", 1, 200);
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Bersihkan newline

        char namaC[50];
        strncpy(namaC, nama.c_str(), sizeof(namaC) - 1);
        namaC[sizeof(namaC) - 1] = '\0';

        penjadwal.tambahMataKuliah(namaC, deskripsi, tingkatKesulitan, waktuBelajar, efektivitas);
    }

    penjadwal.kelompokkanMataKuliah(0, jumlahMataKuliah - 1);
    penjadwal.tampilkanKategori();
    penjadwal.tampilkanRiwayat();
    int kapasitasHarian = dapatkanInputValid("\nMasukkan kapasitas waktu belajar harian (menit): ", 60, 600);
    penjadwal.tampilkanJadwalHarian(kapasitasHarian);

    cout << "\nTerima kasih telah menggunakan program ini!\n";
    return 0;
}
